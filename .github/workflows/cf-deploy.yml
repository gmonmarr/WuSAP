name: Deploy Backend & Frontend to SAP CF

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Code
        uses: actions/checkout@v3

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: ☁️ Install Cloud Foundry CLI v8
        run: |
          wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | \
            sudo gpg --dearmor -o /usr/share/keyrings/cli.cloudfoundry.org.gpg
          echo "deb [signed-by=/usr/share/keyrings/cli.cloudfoundry.org.gpg] https://packages.cloudfoundry.org/debian stable main" | \
            sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
          sudo apt-get update
          sudo apt-get install -y cf8-cli || sudo apt-get install -y cf-cli
          cf version

      - name: 🔐 Authenticate to SAP CF
        env:
          CF_API: ${{ secrets.CF_API }}
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
          CF_ORG: ${{ secrets.CF_ORG }}
          CF_SPACE: ${{ secrets.CF_SPACE }}
        run: |
          cf api "$CF_API"
          cf auth "$CF_USERNAME" "$CF_PASSWORD"
          cf target -o "$CF_ORG" -s "$CF_SPACE"
      
      - name: 🤓☝️ Backend testing
        working-directory: backend
        run: |
          npm install
          npm run lint
          npm test --coverage

      - name: 🔍 SonarQube Scan (Backend)
        working-directory: backend
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_BACKEND }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_BACKEND }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY_BACKEND }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner.zip
          export PATH="$PATH:$PWD/sonar-scanner-5.0.1.3006-linux/bin"
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.exclusions=node_modules/**,coverage/**,tests/**,middleware/**,controllers/**,routes/**,db/**,scripts/** \
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.config.cjs,app.js,jest-to-csv.js \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info

      - name: 🚀 Deploy Backend
        working-directory: backend
        run: |
          cf set-env wusap-backend HANA_SERVER_NODE "${{ secrets.HANA_SERVER_NODE }}"
          cf set-env wusap-backend HANA_USER "${{ secrets.HANA_USER }}"
          cf set-env wusap-backend HANA_PASSWORD "${{ secrets.HANA_PASSWORD }}"
          cf set-env wusap-backend HANA_SCHEMA "${{ secrets.HANA_SCHEMA }}"
          cf set-env wusap-backend JWT_SECRET "${{ secrets.JWT_SECRET }}"
          cf set-env wusap-backend JWT_EXPIRATION "${{ secrets.JWT_EXPIRATION }}"
          cf set-env wusap-backend CORS_ALLOWED_ORIGINS "${{ secrets.CORS_ALLOWED_ORIGINS }}"
          cf push wusap-backend

      - name: 🌐 Get Backend Route
        id: backend-url
        run: |
          BACKEND_ROUTE=$(cf app wusap-backend | grep routes: | awk '{print $2}')
          echo "BACKEND_URL=https://$BACKEND_ROUTE" >> $GITHUB_ENV
          echo "✅ Backend URL: https://$BACKEND_ROUTE"

      - name: 🔎 Test /api/test-hana endpoint
        run: |
          echo "⏳ Waiting 15s for backend to boot..."
          sleep 15
          curl --fail "${{ env.BACKEND_URL }}/api/test-hana" || {
            echo "❌ /api/test-hana check failed."
            exit 1
          }

      - name: 🤓☝️ Frontend testing
        working-directory: frontend
        run: |
          npm install
          npm test --coverage
          npm run lint

      - name: 🔍 SonarQube Scan (Frontend)
        working-directory: frontend
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_FRONTEND }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY_FRONTEND }}
        run: |
          curl -sSLo sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip -q sonar-scanner.zip
          export PATH="$PATH:$PWD/sonar-scanner-5.0.1.3006-linux/bin"
          sonar-scanner \
            -Dsonar.projectKey=$SONAR_PROJECT_KEY \
            -Dsonar.sources=. \
            -Dsonar.host.url=$SONAR_HOST_URL \
            -Dsonar.login=$SONAR_TOKEN \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.exclusions=node_modules/**,coverage/** \
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.config.cjs


      - name: 🏗️ Build Frontend
        working-directory: frontend
        run: |
          echo "VITE_API_SERVER=${{ env.BACKEND_URL }}" > .env.production
          npm install
          npm run build
          echo "root: ." > dist/Staticfile

      - name: 🌍 Deploy Frontend
        working-directory: frontend
        run: cf push wusap-frontend