CREATE SCHEMA WUSAP;

-- Locations
CREATE TABLE WUSAP.Locations (
  storeID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name NVARCHAR(100), -- Nombre corto de la tienda (ej. Díaz)
  location NVARCHAR(255) -- ubicación de la tienda (ej. 111 Díaz Ordáz, Col. Colonial 111111, nl, mx)
);

-- Combined Employees, Authentication, and Privilege
CREATE TABLE WUSAP.Employees (
  employeeID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name NVARCHAR(100) NOT NULL, -- nombres del usuario
  lastName NVARCHAR(100) NOT NULL, -- apellidos del usuario
  email NVARCHAR(255) NOT NULL UNIQUE, -- email del usuario
  password NVARCHAR(255) NOT NULL, -- contraseña del usuario
  role NVARCHAR(100) NOT NULL, -- rol del usuario
  userPhoto NVARCHAR(500), -- liga a fotografía de usuario (ej a un S3 bucket)
  cellphone NVARCHAR(20), -- celular del empleado
  isActive BOOLEAN DEFAULT TRUE, -- el empleado está activo
  isBlocked BOOLEAN DEFAULT FALSE, -- el empleado está bloqueado de la aplicación
  blockReason NVARCHAR(255), -- si el empleado es bloqueado, aquí va la razón de porqué
  storeID INTEGER, -- a qué tienda pertenece (almacén, suc. diaz ordaz, hq. etc.)
  FOREIGN KEY (storeID) REFERENCES WUSAP.Locations(storeID)
);

-- Products
CREATE TABLE WUSAP.Products (
  productID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name NVARCHAR(100) NOT NULL, -- nombre del producto
  suggestedPrice DECIMAL(10,2) NOT NULL, -- precio sugerido 
  unit NVARCHAR(20), -- en qué unidad está el producto (kg, pieza, libras, etc.)
  discontinued BOOLEAN DEFAULT FALSE
);

-- Inventory
CREATE TABLE WUSAP.Inventory (
  inventoryID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  productID INTEGER NOT NULL, -- de qué producto hablamos
  storeID INTEGER NOT NULL, -- en qué tienda
  quantity INTEGER, -- cantidad en inventario
  FOREIGN KEY (productID) REFERENCES WUSAP.Products(productID),
  FOREIGN KEY (storeID) REFERENCES WUSAP.Locations(storeID)
);

-- Orders
CREATE TABLE WUSAP.Orders (
  orderID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  orderDate TIMESTAMP, -- fecha cuando se hace el pedido
  orderTotal DECIMAL(12,2), -- total de la orden
  status NVARCHAR(50), -- estatus del producto
  comments NVARCHAR(1000), -- comentario sobre la orden
  storeID INTEGER, -- a qué tienda debe llegar esta orden
  FOREIGN KEY (storeID) REFERENCES WUSAP.Locations(storeID)
);

-- OrderItems
CREATE TABLE WUSAP.OrderItems (
  orderItemID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  orderID INTEGER, -- bajo qué orden (un producto dentro de una orden)
  productID INTEGER, -- qué producto
  source NVARCHAR(1000), -- de dónde viene el producto
  quantity DECIMAL(10,2), -- cantidad que se ordena
  itemTotal DECIMAL(12,2), -- total de orden de compra para este producto
  FOREIGN KEY (orderID) REFERENCES WUSAP.Orders(orderID),
  FOREIGN KEY (productID) REFERENCES WUSAP.Products(productID)
);

-- OrderHistory (updated to reference orderItemID instead of orderID)
CREATE TABLE WUSAP.OrderHistory (
  historyID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  orderItemID INTEGER, -- orderitem que se hacer referencia
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- cuándo sucede
  action NVARCHAR(255), -- si se aprueba, crea, o rechaza una orden de compra (más stock para tienda)
  employeeID INTEGER, -- empleado que hace la actualización a la orden
  comment NVARCHAR(1000), -- cualquier comentario relevante a la orden
  FOREIGN KEY (orderItemID) REFERENCES WUSAP.OrderItems(orderItemID),
  FOREIGN KEY (employeeID) REFERENCES WUSAP.Employees(employeeID)
);

-- Sales
CREATE TABLE WUSAP.Sale (
  saleID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  saleDate TIMESTAMP, -- cuándo se vendió
  employeeID INTEGER, -- empleado responsable por la venta
  saleTotal DECIMAL(12,2), -- total de la venta
  FOREIGN KEY (employeeID) REFERENCES WUSAP.Employees(employeeID)
);

-- SaleItems
CREATE TABLE WUSAP.SaleItems (
  saleItemID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  saleID INTEGER, -- id de venta (ticket / recibo)
  productID INTEGER, -- id de producto (fk)
  quantity DECIMAL(10,2), -- cantidad de producto
  itemTotal DECIMAL(12,2), -- total de ese producto 
  FOREIGN KEY (saleID) REFERENCES WUSAP.Sale(saleID),
  FOREIGN KEY (productID) REFERENCES WUSAP.Products(productID)
);

-- Logs on api usage
CREATE TABLE WUSAP.APILogs (
  apiLogID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  employeeID INTEGER, -- null if unauthenticated
  ipAddress NVARCHAR(45), -- IPv4/IPv6
  method NVARCHAR(10), -- GET, POST, PUT, DELETE
  endpoint NVARCHAR(255), -- /api/products, /auth/login
  statusCode INTEGER,
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  userAgent NVARCHAR(1000), -- Optional: Browser/Device info
  FOREIGN KEY (employeeID) REFERENCES WUSAP.Employees(employeeID)
);

-- Logs on tables
CREATE TABLE WUSAP.TableLogs (
  tableLogID INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  employeeID INTEGER NOT NULL,
  tableName NVARCHAR(100) NOT NULL,
  recordID INTEGER NOT NULL,
  action NVARCHAR(10) NOT NULL, -- CREATE, UPDATE, DELETE
  timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (employeeID) REFERENCES WUSAP.Employees(employeeID)
);
